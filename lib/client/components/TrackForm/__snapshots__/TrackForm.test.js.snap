// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TrackForm renders correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TrackForm
    handleChange={[Function]}
    onClose={[Function]}
    onSubmit={[Function]}
    show={true}
    task={
      Object {
        "description": "",
        "pieces": Array [],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Modal
        animation={true}
        autoFocus={true}
        backdrop={true}
        bsClass="modal"
        dialogComponentClass={[Function]}
        enforceFocus={true}
        keyboard={true}
        manager={
          ModalManager {
            "add": [Function],
            "containers": Array [],
            "data": Array [],
            "handleContainerOverflow": true,
            "hideSiblingNodes": true,
            "isTopModal": [Function],
            "modals": Array [],
            "remove": [Function],
          }
        }
        onHide={[Function]}
        renderBackdrop={[Function]}
        restoreFocus={true}
        show={true}
      >
        <ModalHeader
          bsClass="modal-header"
          closeButton={false}
          closeLabel="Close"
        >
          <ModalTitle
            bsClass="modal-title"
            componentClass="h4"
          >
            New Task
          </ModalTitle>
        </ModalHeader>
        <ModalBody
          bsClass="modal-body"
          componentClass="div"
        >
          <form>
            <FormGroup
              bsClass="form-group"
              controlId="taskName"
              validationState={null}
            >
              <ControlLabel
                bsClass="control-label"
                srOnly={false}
              >
                Task Description
              </ControlLabel>
              <FormControl
                bsClass="form-control"
                componentClass="input"
                onChange={[Function]}
                placeholder="Enter description"
                type="text"
                value=""
              />
              <FormControlFeedback
                bsClass="form-control-feedback"
                bsRole="feedback"
              />
            </FormGroup>
          </form>
        </ModalBody>
        <ModalFooter
          bsClass="modal-footer"
          componentClass="div"
        >
          <Button
            active={false}
            block={false}
            bsClass="btn"
            bsStyle="default"
            disabled={false}
            onClick={[Function]}
            type="button"
          >
            Close
          </Button>
          <Button
            active={false}
            block={false}
            bsClass="btn"
            bsStyle="primary"
            disabled={false}
            onClick={[Function]}
            type="submit"
          >
            Save
          </Button>
        </ModalFooter>
      </Modal>,
      "className": "static-modal",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "animation": true,
        "autoFocus": true,
        "backdrop": true,
        "bsClass": "modal",
        "children": Array [
          <ModalHeader
            bsClass="modal-header"
            closeButton={false}
            closeLabel="Close"
          >
            <ModalTitle
              bsClass="modal-title"
              componentClass="h4"
            >
              New Task
            </ModalTitle>
          </ModalHeader>,
          <ModalBody
            bsClass="modal-body"
            componentClass="div"
          >
            <form>
              <FormGroup
                bsClass="form-group"
                controlId="taskName"
                validationState={null}
              >
                <ControlLabel
                  bsClass="control-label"
                  srOnly={false}
                >
                  Task Description
                </ControlLabel>
                <FormControl
                  bsClass="form-control"
                  componentClass="input"
                  onChange={[Function]}
                  placeholder="Enter description"
                  type="text"
                  value=""
                />
                <FormControlFeedback
                  bsClass="form-control-feedback"
                  bsRole="feedback"
                />
              </FormGroup>
            </form>
          </ModalBody>,
          <ModalFooter
            bsClass="modal-footer"
            componentClass="div"
          >
            <Button
              active={false}
              block={false}
              bsClass="btn"
              bsStyle="default"
              disabled={false}
              onClick={[Function]}
              type="button"
            >
              Close
            </Button>
            <Button
              active={false}
              block={false}
              bsClass="btn"
              bsStyle="primary"
              disabled={false}
              onClick={[Function]}
              type="submit"
            >
              Save
            </Button>
          </ModalFooter>,
        ],
        "dialogComponentClass": [Function],
        "enforceFocus": true,
        "keyboard": true,
        "manager": ModalManager {
          "add": [Function],
          "containers": Array [],
          "data": Array [],
          "handleContainerOverflow": true,
          "hideSiblingNodes": true,
          "isTopModal": [Function],
          "modals": Array [],
          "remove": [Function],
        },
        "onHide": [Function],
        "renderBackdrop": [Function],
        "restoreFocus": true,
        "show": true,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "bsClass": "modal-header",
            "children": <ModalTitle
              bsClass="modal-title"
              componentClass="h4"
            >
              New Task
            </ModalTitle>,
            "closeButton": false,
            "closeLabel": "Close",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "modal-title",
              "children": "New Task",
              "componentClass": "h4",
            },
            "ref": null,
            "rendered": "New Task",
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "bsClass": "modal-body",
            "children": <form>
              <FormGroup
                bsClass="form-group"
                controlId="taskName"
                validationState={null}
              >
                <ControlLabel
                  bsClass="control-label"
                  srOnly={false}
                >
                  Task Description
                </ControlLabel>
                <FormControl
                  bsClass="form-control"
                  componentClass="input"
                  onChange={[Function]}
                  placeholder="Enter description"
                  type="text"
                  value=""
                />
                <FormControlFeedback
                  bsClass="form-control-feedback"
                  bsRole="feedback"
                />
              </FormGroup>
            </form>,
            "componentClass": "div",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <FormGroup
                bsClass="form-group"
                controlId="taskName"
                validationState={null}
              >
                <ControlLabel
                  bsClass="control-label"
                  srOnly={false}
                >
                  Task Description
                </ControlLabel>
                <FormControl
                  bsClass="form-control"
                  componentClass="input"
                  onChange={[Function]}
                  placeholder="Enter description"
                  type="text"
                  value=""
                />
                <FormControlFeedback
                  bsClass="form-control-feedback"
                  bsRole="feedback"
                />
              </FormGroup>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "form-group",
                "children": Array [
                  <ControlLabel
                    bsClass="control-label"
                    srOnly={false}
                  >
                    Task Description
                  </ControlLabel>,
                  <FormControl
                    bsClass="form-control"
                    componentClass="input"
                    onChange={[Function]}
                    placeholder="Enter description"
                    type="text"
                    value=""
                  />,
                  <FormControlFeedback
                    bsClass="form-control-feedback"
                    bsRole="feedback"
                  />,
                ],
                "controlId": "taskName",
                "validationState": null,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "bsClass": "control-label",
                    "children": "Task Description",
                    "srOnly": false,
                  },
                  "ref": null,
                  "rendered": "Task Description",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "bsClass": "form-control",
                    "componentClass": "input",
                    "onChange": [Function],
                    "placeholder": "Enter description",
                    "type": "text",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "bsClass": "form-control-feedback",
                    "bsRole": "feedback",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            "type": "form",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "bsClass": "modal-footer",
            "children": Array [
              <Button
                active={false}
                block={false}
                bsClass="btn"
                bsStyle="default"
                disabled={false}
                onClick={[Function]}
                type="button"
              >
                Close
              </Button>,
              <Button
                active={false}
                block={false}
                bsClass="btn"
                bsStyle="primary"
                disabled={false}
                onClick={[Function]}
                type="submit"
              >
                Save
              </Button>,
            ],
            "componentClass": "div",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "active": false,
                "block": false,
                "bsClass": "btn",
                "bsStyle": "default",
                "children": "Close",
                "disabled": false,
                "onClick": [Function],
                "type": "button",
              },
              "ref": null,
              "rendered": "Close",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "active": false,
                "block": false,
                "bsClass": "btn",
                "bsStyle": "primary",
                "children": "Save",
                "disabled": false,
                "onClick": [Function],
                "type": "submit",
              },
              "ref": null,
              "rendered": "Save",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Modal
          animation={true}
          autoFocus={true}
          backdrop={true}
          bsClass="modal"
          dialogComponentClass={[Function]}
          enforceFocus={true}
          keyboard={true}
          manager={
            ModalManager {
              "add": [Function],
              "containers": Array [],
              "data": Array [],
              "handleContainerOverflow": true,
              "hideSiblingNodes": true,
              "isTopModal": [Function],
              "modals": Array [],
              "remove": [Function],
            }
          }
          onHide={[Function]}
          renderBackdrop={[Function]}
          restoreFocus={true}
          show={true}
        >
          <ModalHeader
            bsClass="modal-header"
            closeButton={false}
            closeLabel="Close"
          >
            <ModalTitle
              bsClass="modal-title"
              componentClass="h4"
            >
              New Task
            </ModalTitle>
          </ModalHeader>
          <ModalBody
            bsClass="modal-body"
            componentClass="div"
          >
            <form>
              <FormGroup
                bsClass="form-group"
                controlId="taskName"
                validationState={null}
              >
                <ControlLabel
                  bsClass="control-label"
                  srOnly={false}
                >
                  Task Description
                </ControlLabel>
                <FormControl
                  bsClass="form-control"
                  componentClass="input"
                  onChange={[Function]}
                  placeholder="Enter description"
                  type="text"
                  value=""
                />
                <FormControlFeedback
                  bsClass="form-control-feedback"
                  bsRole="feedback"
                />
              </FormGroup>
            </form>
          </ModalBody>
          <ModalFooter
            bsClass="modal-footer"
            componentClass="div"
          >
            <Button
              active={false}
              block={false}
              bsClass="btn"
              bsStyle="default"
              disabled={false}
              onClick={[Function]}
              type="button"
            >
              Close
            </Button>
            <Button
              active={false}
              block={false}
              bsClass="btn"
              bsStyle="primary"
              disabled={false}
              onClick={[Function]}
              type="submit"
            >
              Save
            </Button>
          </ModalFooter>
        </Modal>,
        "className": "static-modal",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "animation": true,
          "autoFocus": true,
          "backdrop": true,
          "bsClass": "modal",
          "children": Array [
            <ModalHeader
              bsClass="modal-header"
              closeButton={false}
              closeLabel="Close"
            >
              <ModalTitle
                bsClass="modal-title"
                componentClass="h4"
              >
                New Task
              </ModalTitle>
            </ModalHeader>,
            <ModalBody
              bsClass="modal-body"
              componentClass="div"
            >
              <form>
                <FormGroup
                  bsClass="form-group"
                  controlId="taskName"
                  validationState={null}
                >
                  <ControlLabel
                    bsClass="control-label"
                    srOnly={false}
                  >
                    Task Description
                  </ControlLabel>
                  <FormControl
                    bsClass="form-control"
                    componentClass="input"
                    onChange={[Function]}
                    placeholder="Enter description"
                    type="text"
                    value=""
                  />
                  <FormControlFeedback
                    bsClass="form-control-feedback"
                    bsRole="feedback"
                  />
                </FormGroup>
              </form>
            </ModalBody>,
            <ModalFooter
              bsClass="modal-footer"
              componentClass="div"
            >
              <Button
                active={false}
                block={false}
                bsClass="btn"
                bsStyle="default"
                disabled={false}
                onClick={[Function]}
                type="button"
              >
                Close
              </Button>
              <Button
                active={false}
                block={false}
                bsClass="btn"
                bsStyle="primary"
                disabled={false}
                onClick={[Function]}
                type="submit"
              >
                Save
              </Button>
            </ModalFooter>,
          ],
          "dialogComponentClass": [Function],
          "enforceFocus": true,
          "keyboard": true,
          "manager": ModalManager {
            "add": [Function],
            "containers": Array [],
            "data": Array [],
            "handleContainerOverflow": true,
            "hideSiblingNodes": true,
            "isTopModal": [Function],
            "modals": Array [],
            "remove": [Function],
          },
          "onHide": [Function],
          "renderBackdrop": [Function],
          "restoreFocus": true,
          "show": true,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "modal-header",
              "children": <ModalTitle
                bsClass="modal-title"
                componentClass="h4"
              >
                New Task
              </ModalTitle>,
              "closeButton": false,
              "closeLabel": "Close",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "modal-title",
                "children": "New Task",
                "componentClass": "h4",
              },
              "ref": null,
              "rendered": "New Task",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "modal-body",
              "children": <form>
                <FormGroup
                  bsClass="form-group"
                  controlId="taskName"
                  validationState={null}
                >
                  <ControlLabel
                    bsClass="control-label"
                    srOnly={false}
                  >
                    Task Description
                  </ControlLabel>
                  <FormControl
                    bsClass="form-control"
                    componentClass="input"
                    onChange={[Function]}
                    placeholder="Enter description"
                    type="text"
                    value=""
                  />
                  <FormControlFeedback
                    bsClass="form-control-feedback"
                    bsRole="feedback"
                  />
                </FormGroup>
              </form>,
              "componentClass": "div",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <FormGroup
                  bsClass="form-group"
                  controlId="taskName"
                  validationState={null}
                >
                  <ControlLabel
                    bsClass="control-label"
                    srOnly={false}
                  >
                    Task Description
                  </ControlLabel>
                  <FormControl
                    bsClass="form-control"
                    componentClass="input"
                    onChange={[Function]}
                    placeholder="Enter description"
                    type="text"
                    value=""
                  />
                  <FormControlFeedback
                    bsClass="form-control-feedback"
                    bsRole="feedback"
                  />
                </FormGroup>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "bsClass": "form-group",
                  "children": Array [
                    <ControlLabel
                      bsClass="control-label"
                      srOnly={false}
                    >
                      Task Description
                    </ControlLabel>,
                    <FormControl
                      bsClass="form-control"
                      componentClass="input"
                      onChange={[Function]}
                      placeholder="Enter description"
                      type="text"
                      value=""
                    />,
                    <FormControlFeedback
                      bsClass="form-control-feedback"
                      bsRole="feedback"
                    />,
                  ],
                  "controlId": "taskName",
                  "validationState": null,
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "bsClass": "control-label",
                      "children": "Task Description",
                      "srOnly": false,
                    },
                    "ref": null,
                    "rendered": "Task Description",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "bsClass": "form-control",
                      "componentClass": "input",
                      "onChange": [Function],
                      "placeholder": "Enter description",
                      "type": "text",
                      "value": "",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "bsClass": "form-control-feedback",
                      "bsRole": "feedback",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              "type": "form",
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "modal-footer",
              "children": Array [
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  disabled={false}
                  onClick={[Function]}
                  type="button"
                >
                  Close
                </Button>,
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="primary"
                  disabled={false}
                  onClick={[Function]}
                  type="submit"
                >
                  Save
                </Button>,
              ],
              "componentClass": "div",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "active": false,
                  "block": false,
                  "bsClass": "btn",
                  "bsStyle": "default",
                  "children": "Close",
                  "disabled": false,
                  "onClick": [Function],
                  "type": "button",
                },
                "ref": null,
                "rendered": "Close",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "active": false,
                  "block": false,
                  "bsClass": "btn",
                  "bsStyle": "primary",
                  "children": "Save",
                  "disabled": false,
                  "onClick": [Function],
                  "type": "submit",
                },
                "ref": null,
                "rendered": "Save",
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "disableLifecycleMethods": true,
  },
}
`;
